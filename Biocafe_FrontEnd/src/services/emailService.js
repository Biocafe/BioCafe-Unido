import emailjs from '@emailjs/browser';
import { emailConfig } from '../config/emailConfig.js';
import { cloudinaryService } from './cloudinaryService';

// Inicializar EmailJS con la clave p칰blica
if (emailConfig.publicKey) {
  emailjs.init(emailConfig.publicKey);
}

/**
 * Env칤a un correo de bienvenida al usuario reci칠n registrado
 * @param {string} userEmail - Email del usuario
 * @param {string} userName - Nombre/email del usuario
 * @param {string} userPassword - Contrase침a del usuario
 * @returns {Promise} - Promesa que resuelve cuando el email se env칤a
 */
export const sendWelcomeEmail = async (userEmail, userName, userPassword) => {
  try {
    console.log('Iniciando env칤o de email...');
    console.log('Configuraci칩n EmailJS:', {
      serviceId: emailConfig.serviceId,
      templateId: emailConfig.templateId,
      publicKey: emailConfig.publicKey ? 'Configurado' : 'No configurado'
    });
    
    // Par치metros que coinciden exactamente con el template de EmailJS
    const templateParams = {
      to_email: userEmail,
      to_name: userName,
      user_email: userEmail,
      user_password: userPassword
    };
    
    console.log('Par치metros del template:', templateParams);

    const response = await emailjs.send(
      emailConfig.serviceId,
      emailConfig.templateId,
      templateParams,
      emailConfig.publicKey
    );

    console.log('Email enviado exitosamente:', response);
    return { success: true, message: 'Correo de bienvenida enviado exitosamente' };
  } catch (error) {
    console.error('Error detallado al enviar el email:', error);
    return { success: false, message: 'Error al enviar el correo de bienvenida', error };
  }
};

/**
 * Env칤a un correo de recuperaci칩n de contrase침a
 * @param {string} userEmail - Email del usuario
 * @param {string} userName - Nombre del usuario
 * @param {string} resetLink - Enlace para restablecer la contrase침a
 * @returns {Promise} - Promesa que resuelve cuando el email se env칤a
 */
export const sendPasswordResetEmail = async (userEmail, userName, resetLink) => {
  try {
    console.log('Iniciando env칤o de email de recuperaci칩n...');
    console.log('Configuraci칩n EmailJS:', {
      serviceId: emailConfig.serviceId,
      templateId: emailConfig.forgotPasswordTemplateId,
      publicKey: emailConfig.publicKey ? 'Configurado' : 'No configurado'
    });
    
    // Par치metros para el template de recuperaci칩n de contrase침a
    // Obtener la URL del logo desde Cloudinary
    const logoUrl = cloudinaryService.isConfigured() 
      ? cloudinaryService.getBioCafeLogo()
      : 'https://via.placeholder.com/150x60/8B4513/F5E6D3?text=BioCafe'; // Fallback
    
    console.log('游댌 DEBUG - URL del logo:', logoUrl);
    console.log('游댌 DEBUG - Cloudinary configurado:', cloudinaryService.isConfigured());
    
    const templateParams = {
      to_name: userEmail,
      to_email: userEmail,
      user_email: userEmail,
      reset_link: resetLink,
      logo_url: logoUrl
    };
    
    console.log('Par치metros del template:', templateParams);

    const response = await emailjs.send(
      emailConfig.serviceId,
      emailConfig.forgotPasswordTemplateId,
      templateParams,
      emailConfig.publicKey
    );

    console.log('Email de recuperaci칩n enviado exitosamente:', response);
    return { success: true, message: 'Correo de recuperaci칩n enviado exitosamente' };
  } catch (error) {
    console.error('Error detallado al enviar el email de recuperaci칩n:', error);
    return { success: false, message: 'Error al enviar el correo de recuperaci칩n', error };
  }
};

/**
 * Verifica si EmailJS est치 configurado correctamente
 * @returns {boolean} - True si est치 configurado, false si no
 */
export const isEmailConfigured = () => {
  return emailConfig.publicKey && emailConfig.publicKey !== 'tu_public_key_aqui' && 
         emailConfig.serviceId && emailConfig.serviceId !== 'service_biocafe' && 
         emailConfig.templateId && emailConfig.templateId !== 'template_welcome';
};

/**
 * Verifica si el template de recuperaci칩n de contrase침a est치 configurado
 * @returns {boolean} - True si est치 configurado, false si no
 */
export const isForgotPasswordConfigured = () => {
  return emailConfig.forgotPasswordTemplateId && emailConfig.forgotPasswordTemplateId !== 'template_forgot_password';
};

const emailService = {
  sendWelcomeEmail,
  sendPasswordResetEmail,
  isEmailConfigured,
  isForgotPasswordConfigured
};

export default emailService;